# 日记打印配置。
FABRIC_LOGGING_SPEC=debug:msp=info:gossip=info

# docker
CORE_VM_ENDPOINT=unix:///var/run/docker.sock

# 链码容器的网络模式。
CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=host

# 配置目录。
FABRIC_CFG_PATH=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/../../sampleconfig

# 主机HOST名称。
HOSTNAME=peer0.government.peer.com

# 设置对等节点实例的标识ID。
CORE_PEER_ID=peer0.government.peer.com

# 用于分离网络，代码中没啥用途。
CORE_PEER_NETWORKID=dev

# 设置对等节点的监听地址。默认值：0.0.0.0:7051
CORE_PEER_LISTENADDRESS=0.0.0.0:7051

# 同一机构中其他Peer节点要连接此节点需指定的P2P连接地址。默认值：域名:7051
CORE_PEER_ADDRESS=peer0.government.peer.com:7051

# Peer节点监听链码连接地址。默认值：0.0.0.0:7052
CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052

# 链码连接节点地址。默认值：域名:7052
CORE_PEER_CHAINCODEADDRESS=host.docker.internal:7052

# 是否让节点自动检测其它节点，默认值：false
CORE_PEER_ADDRESSAUTODETECT=true

# 账本数据在文件系统中的路径。默认值：/var/hyperledger/production
CORE_PEER_FILESYSTEMPATH=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/peer0.government.peer.com

# Peer节点的本地MSP配置文件的路径。
# 应用程序对应的是用户的MSP目录。
CORE_PEER_MSPCONFIGPATH=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/msp

# 本地MSP的标识ID。LocalMspID的值需要匹配该节点所在通道中的某个MSP，否则该节点的消息将被其他节点视为无效。
CORE_PEER_LOCALMSPID=GovernmentMSP

# MSP的类型。
CORE_PEER_LOCALMSPTYPE=bccsp

# Peer节点客户端连接超时时长设置。
CORE_PEER_CLIENT_CONNTIMEOUT=3s




# 设置初始化gossip的引导节点列表，节点启动时将连接这些引导节点，这个值一般填写锚节点监听地址。
CORE_PEER_GOSSIP_BOOTSTRAP=peer0.government.peer.com:7051

# 节点公开的可供本机构其他节点访问的端结点。一般：域名：7051
CORE_PEER_GOSSIP_ENDPOINT=peer0.government.peer.com:7051

# 节点是否使用动态算法选出主导节点，该主导节点将连接排序服务并使用分发协议从排序服务拉取账本区块。
CORE_PEER_GOSSIP_USELEADERELECTION=true

# 是否静态指定机构的主导节点，该节点将负责维持与排序节点的连接并向机构中的其他节点分发区块。
CORE_PEER_GOSSIP_ORGLEADER=false

# 节点公开的可供本机构其他节点访问的端结点。供其他机构节点访问的端结点。这个值一般填写锚节点监听地址。
CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.government.peer.com:7051




# 启用对服务端的TLS身份验证。
CORE_PEER_TLS_ENABLED=true

# Peer节点的X.509证书文件路径。
CORE_PEER_TLS_CERT_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/server.crt

# Peer节点的私钥文件路径。
CORE_PEER_TLS_KEY_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/server.key

# Peer节点证书的验证链根证书文件路径
CORE_PEER_TLS_ROOTCERT_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/ca.crt

# 同时要求对服务端和客户端的身份验证，即启用双向TLS。 注意，如果客户端没有配置身份证书信息，将无法成功 连接Peer节点。
CORE_PEER_TLS_CLIENTAUTHREQUIRED=false

# 客户端证书的验证链根证书文件路径
CORE_PEER_TLS_CLIENTROOTCAS_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/ca.crt

# 创建客户端连接时使用的私钥文件路径。
CORE_PEER_TLS_CLIENTKEY_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/server.key

# 创建客户端连接时使用的X.509证书文件的路径。
CORE_PEER_TLS_CLIENTCERT_FILE=/Users/Erin/go/src/github.com/hyperledger/fabric/shell/fixtures/crypto-config/peerOrganizations/government.peer.com/peers/peer0.government.peer.com/tls/server.crt



# 健康检查服务端口
CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
